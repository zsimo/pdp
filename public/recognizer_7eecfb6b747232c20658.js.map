{"version":3,"sources":["webpack:///./src/pages/recognizer/index.js"],"names":["SIZE","canvas","updateImage","video","context","getContext","minSize","Math","min","videoWidth","videoHeight","startX","startY","drawImage","matrix","image","getImageData","i","j","groupIndex","data","putImageData","updateCanvas","dataArray","red","green","blue","getPixelMatrix","document","addEventListener","querySelector","width","height","navigator","mediaDevices","getUserMedia","then","stream","createElement","srcObject","play","setInterval","catch","error","console","log","alert"],"mappings":"yBAEA,MAAMA,EAAO,IAEb,IAAIC,EAyBJ,SAASC,EAAYC,GACb,MAAMC,EAAUH,EAAOI,WAAW,MAC5BC,EAAUC,KAAKC,IAAIL,EAAMM,WAAYN,EAAMO,aAC3CC,GAAUR,EAAMM,WAAaH,GAAW,EACxCM,GAAUT,EAAMO,YAAcJ,GAAW,EAC/CF,EAAQS,UAAUV,EAAOQ,EAAQC,EAAQN,EAASA,EAAS,EAAG,EAAGN,EAAMA,GA4B/E,SAAuBc,GACf,MAAMV,EAAUH,EAAOI,WAAW,MAC5BU,EAAQX,EAAQY,aAAa,EAAG,EAAGhB,EAAMA,GAC/C,IAAK,IAAIiB,EAAI,EAAGA,GAAKjB,EAAMiB,IACnB,IAAK,IAAIC,EAAI,EAAGA,GAAKlB,EAAMkB,IAAK,CACxB,MAAMC,GAAcF,EAAI,GAAKjB,EAAO,EAAc,GAATkB,EAAI,GAC7CH,EAAMK,KAAKD,EAAa,GAAKL,EAAOG,GAAGC,GACvCH,EAAMK,KAAKD,EAAa,GAAKL,EAAOG,GAAGC,GACvCH,EAAMK,KAAKD,EAAa,GAAKL,EAAOG,GAAGC,GAGvDd,EAAQiB,aAAaN,EAAO,EAAG,GAd/BO,CAlBR,SAAyBC,GAEjB,MAAMT,EAAS,GACf,IAAK,IAAIG,EAAI,EAAGA,GAAKjB,EAAMiB,IAAK,CACxBH,EAAOG,GAAK,GACZ,IAAK,IAAIC,EAAI,EAAGA,GAAKlB,EAAMkB,IAAK,CACxB,MAAMC,GAAcF,EAAI,GAAKjB,EAAO,EAAc,GAATkB,EAAI,GACvCM,EAAMD,EAAUJ,EAAa,GAC7BM,EAAQF,EAAUJ,EAAa,GAC/BO,EAAOH,EAAUJ,EAAa,GACpCL,EAAOG,GAAGC,IAAMM,EAAMC,EAAQC,GAAQ,GAGtD,OAAOZ,EAjBMa,CADCvB,EAAQY,aAAa,EAAG,EAAGhB,EAAMA,GACboB,OA/B1CQ,SAASC,iBAAiB,oBAAoB,YAEtC5B,EAAS2B,SAASE,cAAc,WACzBC,MAAQ/B,EACfC,EAAO+B,OAAShC,EAEGiC,UAAUC,aAAaC,aAAa,CAC/ChC,OAAO,IAEJiC,MAAK,SAAUC,GAClB,MAAMlC,EAAQyB,SAASU,cAAc,SACrCnC,EAAMoC,UAAYF,EAClBlC,EAAMqC,OACNC,YAAYvC,EAhBX,GAgBkCC,MAExCuC,OAAM,SAAUC,GACXC,QAAQC,IAAIF,GACZG,MAAM,mBAEdF,QAAQC,IAAI5C,O","file":"recognizer_7eecfb6b747232c20658.js","sourcesContent":["\"use strict\";\n\nconst SIZE = 300;\nconst INTERVAL = 42;\nvar canvas;\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n        canvas = document.querySelector(\"canvas\");\n        canvas.width = SIZE;\n        canvas.height = SIZE;\n\n        const permission = navigator.mediaDevices.getUserMedia({\n                video: true\n        });\n        permission.then(function (stream) {\n                const video = document.createElement(\"video\");\n                video.srcObject = stream;\n                video.play();\n                setInterval(updateImage, INTERVAL, video)\n\n        }).catch(function (error) {\n                console.log(error);\n                alert(\"camera error\");\n        });\n        console.log(canvas)\n});\n\n\nfunction updateImage(video) {\n        const context = canvas.getContext(\"2d\");\n        const minSize = Math.min(video.videoWidth, video.videoHeight);\n        const startX = (video.videoWidth - minSize) / 2;\n        const startY = (video.videoHeight - minSize) / 2;\n        context.drawImage(video, startX, startY, minSize, minSize, 0, 0, SIZE, SIZE);\n\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        var matrix = getPixelMatrix(image.data);\n        processMatrix(matrix);\n}\n\nfunction getPixelMatrix (dataArray) {\n\n        const matrix = [];\n        for (var i = 1; i <= SIZE; i++) {\n                matrix[i] = [];\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        const red = dataArray[groupIndex + 0];\n                        const green = dataArray[groupIndex + 1];\n                        const blue = dataArray[groupIndex + 2];\n                        matrix[i][j] = (red + green + blue) / 3;\n                }\n        }\n        return matrix;\n\n}\n\nfunction processMatrix (matrix) {\n        updateCanvas(matrix);\n}\n\nfunction updateCanvas (matrix) {\n        const context = canvas.getContext(\"2d\");\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        image.data[groupIndex + 0] = matrix[i][j];\n                        image.data[groupIndex + 1] = matrix[i][j];\n                        image.data[groupIndex + 2] = matrix[i][j];\n                }\n        }\n        context.putImageData(image, 0, 0);\n\n}"],"sourceRoot":""}