{"version":3,"file":"car_0592e7fa9fa23248bb90.js","mappings":"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","sources":["webpack:///./src/pages/car/car.js","webpack:///./src/pages/car/controls.js","webpack:///./src/pages/car/network.js","webpack:///./src/pages/car/road.js","webpack:///./src/pages/car/sensor.js","webpack:///./src/pages/car/utils.js","webpack:///./src/pages/car/visualizer.js","webpack:///webpack/bootstrap","webpack:///./src/pages/car/index.js"],"sourcesContent":["\"use strict\";\n\nconst NeuralNetwork = require(\"src/pages/car/network.js\");\nconst Controls = require(\"src/pages/car/controls.js\");\nconst Sensor = require(\"src/pages/car/sensor.js\");\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Car{\n    constructor(x,y,width,height, controlType, maxSpeed = 3){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n\n        this.speed=0;\n        this.acceleration=0.2;\n        this.maxSpeed=maxSpeed;\n        this.friction=0.05;\n        this.angle=0;\n        this.damaged = false;\n\n        this.useBrain=controlType==\"AI\";\n\n        if (controlType !== \"DUMMY\") {\n            this.sensor =  new Sensor(this);\n            this.brain=new NeuralNetwork(\n                [this.sensor.rayCount,6,4]\n            );\n        }\n\n\n        this.controls = new Controls(controlType);\n    }\n\n    update(roadBorders, traffic){\n        if(!this.damaged){\n            this.move();\n            this.polygon=this.createPolygon();\n            this.damaged=this.assessDamage(roadBorders, traffic);\n        }\n        if(this.sensor){\n            this.sensor.update(roadBorders,traffic);\n\n            const offsets=this.sensor.readings.map(\n                s=>s==null?0:1-s.offset\n            );\n            // console.log(this.brain.levels)\n            const outputs= utils.networkFeedForward(offsets,this.brain);\n\n            if(this.useBrain){\n                this.controls.forward=outputs[0];\n                this.controls.left=outputs[1];\n                this.controls.right=outputs[2];\n                this.controls.reverse=outputs[3];\n            }\n        }\n\n    }\n\n    move(){\n        if(this.controls.forward){\n            this.speed+=this.acceleration;\n        }\n        if(this.controls.reverse){\n            this.speed-=this.acceleration;\n        }\n\n        if(this.speed>this.maxSpeed){\n            this.speed=this.maxSpeed;\n        }\n        if(this.speed<-this.maxSpeed/2){\n            this.speed=-this.maxSpeed/2;\n        }\n\n        if(this.speed>0){\n            this.speed-=this.friction;\n        }\n        if(this.speed<0){\n            this.speed+=this.friction;\n        }\n        if(Math.abs(this.speed)<this.friction){\n            this.speed=0;\n        }\n\n        if(this.speed!=0){\n            const flip=this.speed>0?1:-1;\n            if(this.controls.left){\n                this.angle+=0.03*flip;\n            }\n            if(this.controls.right){\n                this.angle-=0.03*flip;\n            }\n        }\n\n        this.x-=Math.sin(this.angle)*this.speed;\n        this.y-=Math.cos(this.angle)*this.speed;\n    }\n\n    assessDamage(roadBorders, traffic){\n        for(let i=0;i<roadBorders.length;i++){\n            if(utils.polysIntersect(this.polygon,roadBorders[i])){\n                return true;\n            }\n        }\n        for(let i=0;i<traffic.length;i++){\n            if(utils.polysIntersect(this.polygon,traffic[i].polygon)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    createPolygon(){\n        const points=[];\n        const rad=Math.hypot(this.width,this.height)/2;\n        const alpha=Math.atan2(this.width,this.height);\n        points.push({\n            x:this.x-Math.sin(this.angle-alpha)*rad,\n            y:this.y-Math.cos(this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(this.angle+alpha)*rad,\n            y:this.y-Math.cos(this.angle+alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle-alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle+alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle+alpha)*rad\n        });\n        return points;\n    }\n\n    draw(ctx, color, sensor = false){\n        if(this.damaged){\n            ctx.fillStyle=\"gray\";\n        }else{\n            ctx.fillStyle=color;\n        }\n        ctx.beginPath();\n        ctx.moveTo(this.polygon[0].x,this.polygon[0].y);\n        for(let i=1;i<this.polygon.length;i++){\n            ctx.lineTo(this.polygon[i].x,this.polygon[i].y);\n        }\n        ctx.fill();\n\n        if (this.sensor && sensor) {\n            this.sensor.draw(ctx);\n        }\n\n    }\n}\n\nmodule.exports = Car;","\"use strict\";\n\nclass Controls{\n    constructor(type){\n        this.forward=false;\n        this.left=false;\n        this.right=false;\n        this.reverse=false;\n\n        if (type === \"KEYS\") {\n            this.addKeyboardListeners();\n        } else if (type === \"DUMMY\") {\n            this.forward = true;\n        }\n\n\n\n    }\n\n\n    addKeyboardListeners(){\n        document.onkeydown=(event)=>{\n\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=true;\n                    break;\n                case \"ArrowRight\":\n                    this.right=true;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=true;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=true;\n                    break;\n            }\n\n        }\n        document.onkeyup=(event)=>{\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=false;\n                    break;\n                case \"ArrowRight\":\n                    this.right=false;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=false;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=false;\n                    break;\n            }\n        }\n\n\n    }\n}\n\nmodule.exports = Controls;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass NeuralNetwork {\n    constructor(neuronCounts){\n\n        this.levels=[];\n        for(let i=0;i<neuronCounts.length-1;i++){\n            this.levels.push(new Level(\n                neuronCounts[i],neuronCounts[i+1]\n            ));\n        }\n    }\n\n    feedForward (givenInputs, network) {\n        return utils.networkFeedForward(givenInputs, network);\n    }\n    static mutate(network,amount=1){\n        network.levels.forEach(level => {\n            for(let i=0;i<level.biases.length;i++){\n                level.biases[i]=utils.lerp(\n                    level.biases[i],\n                    Math.random()*2-1,\n                    amount\n                )\n            }\n            for(let i=0;i<level.weights.length;i++){\n                for(let j=0;j<level.weights[i].length;j++){\n                    level.weights[i][j]=utils.lerp(\n                        level.weights[i][j],\n                        Math.random()*2-1,\n                        amount\n                    )\n                }\n            }\n        });\n    }\n}\n\n\n\n\nclass Level {\n    constructor(inputCount, outputCount){\n        this.inputs=new Array(inputCount);\n        this.outputs=new Array(outputCount);\n        this.biases=new Array(outputCount);\n\n        this.weights=[];\n        for(let i=0;i<inputCount;i++){\n            this.weights[i]=new Array(outputCount);\n        }\n\n        utils.randomize(this);\n\n\n    }\n\n    randomize (level) {\n        utils.randomize(level);\n    }\n\n    feedForward (givenInputs, level) {\n\n        return utils.feedForward(givenInputs, level);\n\n    }\n\n}\n\n\nmodule.exports = NeuralNetwork;\n","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Road{\n    constructor(x,width,laneCount = 3){\n        this.x=x;\n        this.width=width;\n        this.laneCount=laneCount;\n\n        this.left=x-width/2;\n        this.right=x+width/2;\n\n        const infinity=1000000;\n        this.top=-infinity;\n        this.bottom=infinity;\n\n        const topLeft={x:this.left,y:this.top};\n        const topRight={x:this.right,y:this.top};\n        const bottomLeft={x:this.left,y:this.bottom};\n        const bottomRight={x:this.right,y:this.bottom};\n        this.borders=[\n            [topLeft,bottomLeft],\n            [topRight,bottomRight]\n        ];\n    }\n\n    getLaneCenter(laneIndex){\n        const laneWidth=this.width/this.laneCount;\n        return this.left+laneWidth/2+\n            Math.min(laneIndex,this.laneCount-1)*laneWidth;\n    }\n\n    draw(ctx){\n        ctx.lineWidth=5;\n        ctx.strokeStyle=\"white\";\n\n        for(let i=1;i<=this.laneCount-1;i++){\n            const x= utils.lerp(\n                this.left,\n                this.right,\n                i/this.laneCount\n            );\n\n            ctx.setLineDash([20,20]);\n            ctx.beginPath();\n            ctx.moveTo(x,this.top);\n            ctx.lineTo(x,this.bottom);\n            ctx.stroke();\n        }\n\n        ctx.setLineDash([]);\n        this.borders.forEach(border=>{\n            ctx.beginPath();\n            ctx.moveTo(border[0].x,border[0].y);\n            ctx.lineTo(border[1].x,border[1].y);\n            ctx.stroke();\n        });\n    }\n}\n\nmodule.exports = Road;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Sensor {\n    constructor(car){\n        this.car=car;\n        this.rayCount= 5;\n        this.rayLength=150;\n        this.raySpread=Math.PI/2;\n\n        this.rays=[];\n        this.readings=[];\n    }\n\n    update(roadBorders, traffic){\n        this.castRays();\n        this.readings=[];\n        for(let i=0;i<this.rays.length;i++){\n            this.readings.push(\n                this.getReading(this.rays[i], roadBorders, traffic)\n            );\n        }\n    }\n\n    getReading(ray, roadBorders, traffic){\n        let touches=[];\n\n        for(let i=0;i< roadBorders.length;i++){\n            const touch= utils.getIntersection(\n                ray[0],\n                ray[1],\n                roadBorders[i][0],\n                roadBorders[i][1]\n            );\n            if(touch){\n                touches.push(touch);\n            }\n        }\n\n        for(let i=0;i<traffic.length;i++){\n            const poly=traffic[i].polygon;\n            for(let j=0;j<poly.length;j++){\n                const value=utils.getIntersection(\n                    ray[0],\n                    ray[1],\n                    poly[j],\n                    poly[(j+1)%poly.length]\n                );\n                if(value){\n                    touches.push(value);\n                }\n            }\n        }\n\n        if(touches.length==0){\n            return null;\n        }else{\n            const offsets=touches.map(e=>e.offset);\n            const minOffset=Math.min(...offsets);\n            return touches.find(e=>e.offset==minOffset);\n        }\n    }\n\n    castRays(){\n        this.rays=[];\n        for(let i=0;i<this.rayCount;i++){\n            const rayAngle= utils.lerp(\n                this.raySpread/2,\n                -this.raySpread/2,\n                this.rayCount==1?0.5:i/(this.rayCount-1)\n            )+this.car.angle;\n\n            const start={x:this.car.x, y:this.car.y};\n            const end={\n                x:this.car.x-\n                    Math.sin(rayAngle)*this.rayLength,\n                y:this.car.y-\n                    Math.cos(rayAngle)*this.rayLength\n            };\n            this.rays.push([start,end]);\n        }\n    }\n\n    draw(ctx){\n        for(let i=0;i<this.rayCount;i++){\n            let end=this.rays[i][1];\n            if(this.readings[i]){\n                end=this.readings[i];\n            }\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"yellow\";\n            ctx.moveTo(\n                this.rays[i][0].x,\n                this.rays[i][0].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"black\";\n            ctx.moveTo(\n                this.rays[i][1].x,\n                this.rays[i][1].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n        }\n    }\n\n}\n\nmodule.exports = Sensor;","\"use strict\";\n\nconst utils = {\n    lerp: function (A,B,t){\n        return A+(B-A)*t;\n    },\n    getNodeX: function (nodes,index,left,right) {\n        return utils.lerp(\n            left,\n            right,\n            nodes.length==1\n                ?0.5\n                :index/(nodes.length-1)\n        );\n    },\n    getIntersection: function(A,B,C,D){\n        const tTop=(D.x-C.x)*(A.y-C.y)-(D.y-C.y)*(A.x-C.x);\n        const uTop=(C.y-A.y)*(A.x-B.x)-(C.x-A.x)*(A.y-B.y);\n        const bottom=(D.y-C.y)*(B.x-A.x)-(D.x-C.x)*(B.y-A.y);\n\n        if(bottom!=0){\n            const t=tTop/bottom;\n            const u=uTop/bottom;\n            if(t>=0 && t<=1 && u>=0 && u<=1){\n                return {\n                    x: utils.lerp(A.x,B.x,t),\n                    y: utils.lerp(A.y,B.y,t),\n                    offset:t\n                }\n            }\n        }\n\n        return null;\n    },\n    polysIntersect: function(poly1, poly2){\n        for(let i=0;i<poly1.length;i++){\n            for(let j=0;j<poly2.length;j++){\n                const touch=utils.getIntersection(\n                    poly1[i],\n                    poly1[(i+1)%poly1.length],\n                    poly2[j],\n                    poly2[(j+1)%poly2.length]\n                );\n                if(touch){\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    feedForward: function (givenInputs, level) {\n        for(let i=0;i<level.inputs.length;i++){\n            level.inputs[i]=givenInputs[i];\n        }\n\n        for(let i=0;i<level.outputs.length;i++){\n            let sum=0\n            for(let j=0;j<level.inputs.length;j++){\n                sum+=level.inputs[j]*level.weights[j][i];\n            }\n\n            if(sum>level.biases[i]){\n                level.outputs[i]=1;\n            }else{\n                level.outputs[i]=0;\n            }\n        }\n\n        return level.outputs;\n    },\n\n    networkFeedForward: function (givenInputs, network) {\n        let outputs= utils.feedForward(\n            givenInputs,network.levels[0]);\n        for(let i=1;i<network.levels.length;i++){\n            outputs=utils.feedForward(\n                outputs,network.levels[i]);\n        }\n        return outputs;\n    },\n    randomize: function (level) {\n        for(let i=0;i<level.inputs.length;i++){\n            for(let j=0;j<level.outputs.length;j++){\n                level.weights[i][j]=Math.random()*2-1;\n            }\n        }\n\n        for(let i=0;i<level.biases.length;i++){\n            level.biases[i]=Math.random()*2-1;\n        }\n    },\n    getRGBA: function(value){\n        const alpha=Math.abs(value);\n        const R=value<0?0:255;\n        const G=R;\n        const B=value>0?0:255;\n        return \"rgba(\"+R+\",\"+G+\",\"+B+\",\"+alpha+\")\";\n    }\n};\n\nmodule.exports = utils;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Visualizer{\n    static drawNetwork(ctx,network){\n        const margin=50;\n        const left=margin;\n        const top=margin;\n        const width=ctx.canvas.width-margin*2;\n        const height=ctx.canvas.height-margin*2;\n\n        const levelHeight=height/network.levels.length;\n\n        for(let i=network.levels.length-1;i>=0;i--){\n            const levelTop=top+\n                utils.lerp(\n                    height-levelHeight,\n                    0,\n                    network.levels.length==1\n                        ?0.5\n                        :i/(network.levels.length-1)\n                );\n\n            ctx.setLineDash([7,3]);\n            Visualizer.drawLevel(ctx,network.levels[i],\n                left,levelTop,\n                width,levelHeight,\n                i==network.levels.length-1\n                    ?['🠉','🠈','🠊','🠋']\n                    :[]\n            );\n        }\n    }\n\n    static drawLevel(ctx,level,left,top,width,height,outputLabels){\n        const right=left+width;\n        const bottom=top+height;\n\n        const {inputs,outputs,weights,biases}=level;\n\n        for(let i=0;i<inputs.length;i++){\n            for(let j=0;j<outputs.length;j++){\n                ctx.beginPath();\n                ctx.moveTo(\n                    utils.getNodeX(inputs,i,left,right),\n                    bottom\n                );\n                ctx.lineTo(\n                    utils.getNodeX(outputs,j,left,right),\n                    top\n                );\n                ctx.lineWidth=2;\n                ctx.strokeStyle=utils.getRGBA(weights[i][j]);\n                ctx.stroke();\n            }\n        }\n\n        const nodeRadius=18;\n        for(let i=0;i<inputs.length;i++){\n            const x=utils.getNodeX(inputs,i,left,right);\n            ctx.beginPath();\n            ctx.arc(x,bottom,nodeRadius,0,Math.PI*2);\n            ctx.fillStyle=\"black\";\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(x,bottom,nodeRadius*0.6,0,Math.PI*2);\n            ctx.fillStyle=utils.getRGBA(inputs[i]);\n            ctx.fill();\n        }\n\n        for(let i=0;i<outputs.length;i++){\n            const x=utils.getNodeX(outputs,i,left,right);\n            ctx.beginPath();\n            ctx.arc(x,top,nodeRadius,0,Math.PI*2);\n            ctx.fillStyle=\"black\";\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(x,top,nodeRadius*0.6,0,Math.PI*2);\n            ctx.fillStyle=utils.getRGBA(outputs[i]);\n            ctx.fill();\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.arc(x,top,nodeRadius*0.8,0,Math.PI*2);\n            ctx.strokeStyle=utils.getRGBA(biases[i]);\n            ctx.setLineDash([3,3]);\n            ctx.stroke();\n            ctx.setLineDash([]);\n\n            if(outputLabels[i]){\n                ctx.beginPath();\n                ctx.textAlign=\"center\";\n                ctx.textBaseline=\"middle\";\n                ctx.fillStyle=\"black\";\n                ctx.strokeStyle=\"white\";\n                ctx.font=(nodeRadius*1.5)+\"px Arial\";\n                ctx.fillText(outputLabels[i],x,top+nodeRadius*0.1);\n                ctx.lineWidth=0.5;\n                ctx.strokeText(outputLabels[i],x,top+nodeRadius*0.1);\n            }\n        }\n    }\n\n    static getNodeX(nodes,index,left,right){\n        return utils.getNodeX(nodes,index,left,right);\n    }\n}\n\nmodule.exports = Visualizer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n\nconst Car = require(\"src/pages/car/car.js\");\nconst Road = require(\"src/pages/car/road.js\");\nconst Visualizer = require(\"src/pages/car/visualizer.js\");\nconst NeuralNetwork = require(\"src/pages/car/network.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n\n    document.getElementById(\"save\").addEventListener(\"click\", save);\n    document.getElementById(\"discard\").addEventListener(\"click\", discard);\n\n    const carCanvas = document.querySelector(\"#car-canvas\");\n    const networkCanvas = document.querySelector(\"#network-canvas\");\n\n    const carCtx = carCanvas.getContext(\"2d\");\n    const networkCtx = networkCanvas.getContext(\"2d\");\n    const road = new Road(carCanvas.width / 2, carCanvas.width * 0.9);\n    // const car = new Car(road.getLaneCenter(1),100,30,50,\"KEYS\");\n    // const car = new Car(road.getLaneCenter(1),100,30,50,\"AI\");\n\n    const cars = generateCars(100);\n    let bestCar=cars[0];\n    if(localStorage.getItem(\"bestBrain\")){\n        for(let i=0;i<cars.length;i++){\n            cars[i].brain=JSON.parse(\n                localStorage.getItem(\"bestBrain\"));\n            if(i!=0){\n                NeuralNetwork.mutate(cars[i].brain,0.1);\n            }\n        }\n    }\n\n\n    function save(){\n        localStorage.setItem(\"bestBrain\",\n            JSON.stringify(bestCar.brain));\n    }\n\n    function discard(){\n        localStorage.removeItem(\"bestBrain\");\n    }\n\n    const traffic=[\n        new Car(road.getLaneCenter(1),-100,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(0),-300,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(2),-300,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(0),-500,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(1),-500,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(1),-700,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(2),-700,30,50,\"DUMMY\",2),\n    ];\n\n\n    function generateCars(N){\n        const cars=[];\n        for(let i=1;i<=N;i++){\n            cars.push(new Car(road.getLaneCenter(1),100,30,50,\"AI\"));\n        }\n        return cars;\n    }\n\n    animate();\n\n    function animate (time) {\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].update(road.borders,[]);\n        }\n\n        for(let i=0;i<cars.length;i++){\n            cars[i].update(road.borders, traffic);\n        }\n        bestCar=cars.find(\n            c=>c.y==Math.min(\n                ...cars.map(c=>c.y)\n            ));\n\n\n        carCanvas.height = window.innerHeight;\n        networkCanvas.height = window.innerHeight;\n\n\n        carCtx.save();\n        carCtx.translate(0, -bestCar.y + carCanvas.height * 0.75)\n\n        road.draw(carCtx);\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].draw(carCtx,\"#7bb24d\");\n        }\n\n        carCtx.globalAlpha = 0.2;\n        for(let i=0;i<cars.length;i++){\n            cars[i].draw(carCtx, \"#de6717\");\n        }\n        carCtx.globalAlpha = 1;\n        bestCar.draw(carCtx, \"#de6717\", true);\n\n        carCtx.restore();\n\n        networkCtx.lineDashOffset = -time / 50;\n        Visualizer.drawNetwork(networkCtx, bestCar.brain);\n        requestAnimationFrame(animate);\n    }\n});"],"names":["NeuralNetwork","Controls","Sensor","utils","module","exports","constructor","x","y","width","height","controlType","maxSpeed","this","speed","acceleration","friction","angle","damaged","useBrain","sensor","brain","rayCount","controls","update","roadBorders","traffic","move","polygon","createPolygon","assessDamage","offsets","readings","map","s","offset","outputs","networkFeedForward","forward","left","right","reverse","Math","abs","flip","sin","cos","i","length","polysIntersect","points","rad","hypot","alpha","atan2","push","PI","draw","ctx","color","fillStyle","beginPath","moveTo","lineTo","fill","type","addKeyboardListeners","document","onkeydown","event","key","onkeyup","Level","inputCount","outputCount","inputs","Array","biases","weights","randomize","level","feedForward","givenInputs","neuronCounts","levels","network","mutate","amount","forEach","lerp","random","j","laneCount","top","bottom","topLeft","topRight","bottomLeft","bottomRight","borders","getLaneCenter","laneIndex","laneWidth","min","lineWidth","strokeStyle","setLineDash","stroke","border","car","rayLength","raySpread","rays","castRays","getReading","ray","touches","touch","getIntersection","poly","value","e","minOffset","find","rayAngle","start","end","A","B","t","getNodeX","nodes","index","C","D","tTop","uTop","u","poly1","poly2","sum","getRGBA","R","Visualizer","drawNetwork","canvas","margin","levelHeight","levelTop","drawLevel","outputLabels","arc","nodeRadius","textAlign","textBaseline","font","fillText","strokeText","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Car","Road","addEventListener","getElementById","localStorage","setItem","JSON","stringify","bestCar","removeItem","carCanvas","querySelector","networkCanvas","carCtx","getContext","networkCtx","road","cars","N","generateCars","getItem","parse","animate","time","c","window","innerHeight","save","translate","globalAlpha","restore","lineDashOffset","requestAnimationFrame"],"sourceRoot":""}