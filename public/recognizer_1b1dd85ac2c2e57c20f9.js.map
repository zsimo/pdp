{"version":3,"sources":["webpack:///./src/pages/recognizer/index.js"],"names":["SIZE","canvas","OBJECT_PROP","updateImage","video","context","getContext","minSize","Math","min","videoWidth","videoHeight","startX","startY","drawImage","matrix","i","j","isolateObject","box","bbox","xMin","xMax","yMin","yMax","y","x","max","getBoundingBox","boxProp","prop","length","width","aspectRatio","deltaX","deltaY","getBoxProperty","document","getElementById","innerHTML","toFixed","image","getImageData","groupIndex","data","putImageData","updateCanvas","beginPath","rect","stroke","drawBox","processMatrix","dataArray","red","green","blue","getPixelMatrix","addEventListener","querySelector","height","navigator","mediaDevices","getUserMedia","then","stream","createElement","srcObject","play","setInterval","catch","error","console","log","alert"],"mappings":"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","file":"recognizer_1b1dd85ac2c2e57c20f9.js","sourcesContent":["\"use strict\";\n\nconst SIZE = 300;\nconst INTERVAL = 42;\nconst THRESHOLD = 90;\nvar canvas;\nvar OBJECT_PROP;\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n        canvas = document.querySelector(\"canvas\");\n        canvas.width = SIZE;\n        canvas.height = SIZE;\n\n        const permission = navigator.mediaDevices.getUserMedia({\n                video: true\n        });\n        permission.then(function (stream) {\n                const video = document.createElement(\"video\");\n                video.srcObject = stream;\n                video.play();\n                setInterval(updateImage, INTERVAL, video)\n\n        }).catch(function (error) {\n                console.log(error);\n                alert(\"camera error\");\n        });\n        console.log(canvas)\n});\n\n\nfunction updateImage(video) {\n        const context = canvas.getContext(\"2d\");\n        const minSize = Math.min(video.videoWidth, video.videoHeight);\n        const startX = (video.videoWidth - minSize) / 2;\n        const startY = (video.videoHeight - minSize) / 2;\n        context.drawImage(video, startX, startY, minSize, minSize, 0, 0, SIZE, SIZE);\n\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        var matrix = getPixelMatrix(image.data);\n        processMatrix(matrix);\n}\n\nfunction getPixelMatrix (dataArray) {\n\n        const matrix = [];\n        for (var i = 1; i <= SIZE; i++) {\n                matrix[i] = [];\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        const red = dataArray[groupIndex + 0];\n                        const green = dataArray[groupIndex + 1];\n                        const blue = dataArray[groupIndex + 2];\n                        matrix[i][j] = (red + green + blue) / 3;\n                }\n        }\n        return matrix;\n\n}\n\nfunction processMatrix (matrix) {\n        isolateObject(matrix);\n        const box = getBoundingBox(matrix);\n        const boxProp = getBoxProperty(box);\n        OBJECT_PROP = boxProp.aspectRatio;\n        document.getElementById(\"output\").innerHTML = \"Aspect ratio: \" + OBJECT_PROP.toFixed(2);\n\n        updateCanvas(matrix);\n        drawBox(box);\n\n\n}\n\nfunction getBoxProperty (box) {\n        const prop = {\n                length: 0,\n                width: 0,\n                aspectRatio: 0\n        };\n\n        const deltaX = box.xMax - box.xMin + 1;\n        const deltaY = box.yMax - box.yMin + 1;\n\n        prop.length = Math.max(deltaX, deltaY);\n        prop.width = Math.min(deltaX, deltaY);\n        prop.aspectRatio = prop.width / prop.length;\n\n        return prop;\n}\n\nfunction drawBox (box) {\n        const context = canvas.getContext(\"2d\");\n        context.beginPath();\n        const deltaX = box.xMax - box.xMin;\n        const deltaY = box.yMax - box.yMin;\n        context.rect(box.xMin, box.yMin, deltaX, deltaY);\n        context.stroke();\n}\n\nfunction getBoundingBox (matrix) {\n        const bbox = {\n                xMin: SIZE + 1,\n                xMax: 0,\n                yMin: SIZE + 1,\n                yMax: 0\n        };\n        for (var y = 1; y <= SIZE; y++) {\n                for (var x = 1; x <= SIZE; x++) {\n                        if (matrix[y][x] == 0) {\n                                bbox.yMin = Math.min(y, bbox.yMin);\n                                bbox.yMax = Math.max(y, bbox.yMax);\n                                bbox.xMin = Math.min(x, bbox.xMin);\n                                bbox.xMax = Math.max(x, bbox.xMax);\n                        }\n                }\n        }\n\n        return bbox;\n}\n\nfunction isolateObject (matrix) {\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        if (matrix[i][j] < THRESHOLD) {\n                                matrix[i][j] = 0;\n                        } else {\n                                matrix[i][j] = 255\n                        }\n                }\n        }\n}\n\nfunction updateCanvas (matrix) {\n        const context = canvas.getContext(\"2d\");\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        image.data[groupIndex + 0] = matrix[i][j];\n                        image.data[groupIndex + 1] = matrix[i][j];\n                        image.data[groupIndex + 2] = matrix[i][j];\n                }\n        }\n        context.putImageData(image, 0, 0);\n\n}"],"sourceRoot":""}