{"version":3,"sources":["webpack:///./src/pages/recognizer/index.js"],"names":["SIZE","canvas","OBJECT_PROP","OBSERVATIONS","OBS_COUNT","learn","name","document","getElementById","value","prop","alert","checkKeyPress","event","key","updateImage","video","context","getContext","minSize","Math","min","videoWidth","videoHeight","startX","startY","drawImage","matrix","i","j","isolateObject","box","bbox","xMin","xMax","yMin","yMax","y","x","max","getBoundingBox","boxProp","length","width","aspectRatio","deltaX","deltaY","getBoxProperty","fullness","count","countBlackPixels","currentObject","neighbor","minDist","dist","distance","getNearestNeighbor","innerHTML","image","getImageData","groupIndex","data","putImageData","updateCanvas","beginPath","rect","stroke","drawBox","processMatrix","dataArray","red","green","blue","getPixelMatrix","p1","p2","sqrt","addEventListener","querySelector","height","navigator","mediaDevices","getUserMedia","then","stream","createElement","srcObject","play","setInterval","catch","error","console","log"],"mappings":"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","file":"recognizer_bef6887b18b695894ee0.js","sourcesContent":["\"use strict\";\n\nconst SIZE = 300;\nconst INTERVAL = 42;\nconst THRESHOLD = 90;\nvar canvas;\nvar OBJECT_PROP;\nvar OBSERVATIONS = [];\nvar OBS_COUNT = 0;\nconst DIMENSION = 2;\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n        document.querySelector(\"button\").addEventListener(\"click\", learn);\n        document.querySelector(\"#objectName\").addEventListener(\"keypress\", checkKeyPress);\n\n        canvas = document.querySelector(\"canvas\");\n        canvas.width = SIZE;\n        canvas.height = SIZE;\n\n        const permission = navigator.mediaDevices.getUserMedia({\n                video: true\n        });\n        permission.then(function (stream) {\n                const video = document.createElement(\"video\");\n                video.srcObject = stream;\n                video.play();\n                setInterval(updateImage, INTERVAL, video)\n\n        }).catch(function (error) {\n                console.log(error);\n                alert(\"camera error\");\n        });\n        console.log(canvas)\n});\n\n\nfunction learn () {\n        const name = document.getElementById(\"objectName\").value;\n        if (!name) {\n                alert(\"enter a name\");\n                return;\n        }\n        OBS_COUNT ++;\n        OBSERVATIONS[OBS_COUNT] = {\n                name : name,\n                prop: OBJECT_PROP\n        };\n        document.getElementById(\"objectName\").value = \"\";\n}\nfunction checkKeyPress (event) {\n        if (event.key === \"Enter\") {\n                learn();\n        }\n}\n\nfunction updateImage(video) {\n        const context = canvas.getContext(\"2d\");\n        const minSize = Math.min(video.videoWidth, video.videoHeight);\n        const startX = (video.videoWidth - minSize) / 2;\n        const startY = (video.videoHeight - minSize) / 2;\n        context.drawImage(video, startX, startY, minSize, minSize, 0, 0, SIZE, SIZE);\n\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        var matrix = getPixelMatrix(image.data);\n        processMatrix(matrix);\n}\n\nfunction getPixelMatrix (dataArray) {\n\n        const matrix = [];\n        for (var i = 1; i <= SIZE; i++) {\n                matrix[i] = [];\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        const red = dataArray[groupIndex + 0];\n                        const green = dataArray[groupIndex + 1];\n                        const blue = dataArray[groupIndex + 2];\n                        matrix[i][j] = (red + green + blue) / 3;\n                }\n        }\n        return matrix;\n\n}\n\nfunction countBlackPixels (matrix) {\n        var count = 0;\n        for (var i = 1; i <= SIZE; i ++ ) {\n                for (var j = 1; j <= SIZE; j ++ ) {\n                        if (matrix[i][j] == 0) {\n                                count ++;\n                        }\n                }\n        }\n        return count;\n}\n\n\nfunction processMatrix (matrix) {\n        isolateObject(matrix);\n        const box = getBoundingBox(matrix);\n        const boxProp = getBoxProperty(box);\n        const blackPixels = countBlackPixels(matrix);\n        const boxArea = boxProp.width * boxProp.length;\n        const fullness = blackPixels / boxArea;\n\n        OBJECT_PROP = [];\n        OBJECT_PROP[1] = boxProp.aspectRatio;\n        OBJECT_PROP[2] = fullness;\n\n        recognize(OBJECT_PROP);\n\n        updateCanvas(matrix);\n        drawBox(box);\n\n}\n\nfunction recognize (currentObject) {\n        var name;\n        if (OBS_COUNT === 0) {\n                name = \"?\";\n        } else {\n                var neighbor = getNearestNeighbor(currentObject);\n                name = neighbor.name;\n        }\n        document.getElementById(\"output\").innerHTML = name;\n}\n\nfunction distance (p1, p2) {\n        var distance = 0;\n        for (var i = 1; i <= DIMENSION; i ++) {\n                distance += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n        }\n        return Math.sqrt(distance);\n}\nfunction getNearestNeighbor (currentObject) {\n        var neighbor;\n        var minDist;\n        for (var i = 1; i <= OBS_COUNT; i++ ) {\n                var dist = distance(currentObject, OBSERVATIONS[i].prop);\n                if (!minDist || minDist > dist) {\n                        minDist = dist;\n                        neighbor = OBSERVATIONS[i];\n                }\n        }\n\n        return neighbor;\n}\n\nfunction getBoxProperty (box) {\n        const prop = {\n                length: 0,\n                width: 0,\n                aspectRatio: 0\n        };\n\n        const deltaX = box.xMax - box.xMin + 1;\n        const deltaY = box.yMax - box.yMin + 1;\n\n        prop.length = Math.max(deltaX, deltaY);\n        prop.width = Math.min(deltaX, deltaY);\n        prop.aspectRatio = prop.width / prop.length;\n\n        return prop;\n}\n\nfunction drawBox (box) {\n        const context = canvas.getContext(\"2d\");\n        context.beginPath();\n        const deltaX = box.xMax - box.xMin;\n        const deltaY = box.yMax - box.yMin;\n        context.rect(box.xMin, box.yMin, deltaX, deltaY);\n        context.stroke();\n}\n\nfunction getBoundingBox (matrix) {\n        const bbox = {\n                xMin: SIZE + 1,\n                xMax: 0,\n                yMin: SIZE + 1,\n                yMax: 0\n        };\n        for (var y = 1; y <= SIZE; y++) {\n                for (var x = 1; x <= SIZE; x++) {\n                        if (matrix[y][x] == 0) {\n                                bbox.yMin = Math.min(y, bbox.yMin);\n                                bbox.yMax = Math.max(y, bbox.yMax);\n                                bbox.xMin = Math.min(x, bbox.xMin);\n                                bbox.xMax = Math.max(x, bbox.xMax);\n                        }\n                }\n        }\n\n        return bbox;\n}\n\nfunction isolateObject (matrix) {\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        if (matrix[i][j] < THRESHOLD) {\n                                matrix[i][j] = 0;\n                        } else {\n                                matrix[i][j] = 255\n                        }\n                }\n        }\n}\n\nfunction updateCanvas (matrix) {\n        const context = canvas.getContext(\"2d\");\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        image.data[groupIndex + 0] = matrix[i][j];\n                        image.data[groupIndex + 1] = matrix[i][j];\n                        image.data[groupIndex + 2] = matrix[i][j];\n                }\n        }\n        context.putImageData(image, 0, 0);\n\n}"],"sourceRoot":""}