{"version":3,"file":"recognizer_15a663fab3a68abbcdf7.js","mappings":"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","sources":["webpack:///./src/pages/recognizer/index.js"],"sourcesContent":["\"use strict\";\n\nconst SIZE = 300;\nconst INTERVAL = 42;\nconst THRESHOLD = 90;\nvar canvas;\nvar OBJECT_PROP;\nvar OBSERVATIONS = [];\nvar OBS_COUNT = 0;\nconst DIMENSION = 2;\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n        document.querySelector(\"button\").addEventListener(\"click\", learn);\n        document.querySelector(\"#objectName\").addEventListener(\"keypress\", checkKeyPress);\n\n        canvas = document.querySelector(\"canvas\");\n        canvas.width = SIZE;\n        canvas.height = SIZE;\n\n        const permission = navigator.mediaDevices.getUserMedia({\n                video: true\n        });\n        permission.then(function (stream) {\n                const video = document.createElement(\"video\");\n                video.srcObject = stream;\n                video.play();\n                setInterval(updateImage, INTERVAL, video)\n\n        }).catch(function (error) {\n                console.log(error);\n                alert(\"camera error\");\n        });\n        console.log(canvas)\n});\n\n\nfunction learn () {\n        const name = document.getElementById(\"objectName\").value;\n        if (!name) {\n                alert(\"enter a name\");\n                return;\n        }\n        OBS_COUNT ++;\n        OBSERVATIONS[OBS_COUNT] = {\n                name : name,\n                prop: OBJECT_PROP\n        };\n        document.getElementById(\"objectName\").value = \"\";\n}\nfunction checkKeyPress (event) {\n        if (event.key === \"Enter\") {\n                learn();\n        }\n}\n\nfunction updateImage(video) {\n        const context = canvas.getContext(\"2d\");\n        const minSize = Math.min(video.videoWidth, video.videoHeight);\n        const startX = (video.videoWidth - minSize) / 2;\n        const startY = (video.videoHeight - minSize) / 2;\n        context.drawImage(video, startX, startY, minSize, minSize, 0, 0, SIZE, SIZE);\n\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        var matrix = getPixelMatrix(image.data);\n        processMatrix(matrix);\n}\n\nfunction getPixelMatrix (dataArray) {\n\n        const matrix = [];\n        for (var i = 1; i <= SIZE; i++) {\n                matrix[i] = [];\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        const red = dataArray[groupIndex + 0];\n                        const green = dataArray[groupIndex + 1];\n                        const blue = dataArray[groupIndex + 2];\n                        matrix[i][j] = (red + green + blue) / 3;\n                }\n        }\n        return matrix;\n\n}\n\nfunction countBlackPixels (matrix) {\n        var count = 0;\n        for (var i = 1; i <= SIZE; i ++ ) {\n                for (var j = 1; j <= SIZE; j ++ ) {\n                        if (matrix[i][j] == 0) {\n                                count ++;\n                        }\n                }\n        }\n        return count;\n}\n\n\nfunction processMatrix (matrix) {\n        isolateObject(matrix);\n        const box = getBoundingBox(matrix);\n        const boxProp = getBoxProperty(box);\n        const blackPixels = countBlackPixels(matrix);\n        const boxArea = boxProp.width * boxProp.length;\n        const fullness = blackPixels / boxArea;\n\n        OBJECT_PROP = [];\n        OBJECT_PROP[1] = boxProp.aspectRatio;\n        OBJECT_PROP[2] = fullness;\n\n        recognize(OBJECT_PROP);\n\n        updateCanvas(matrix);\n        drawBox(box);\n\n}\n\nfunction recognize (currentObject) {\n        var name;\n        if (OBS_COUNT === 0) {\n                name = \"?\";\n        } else {\n                var neighbor = getNearestNeighbor(currentObject);\n                name = neighbor.name;\n        }\n        document.getElementById(\"output\").innerHTML = name;\n}\n\nfunction distance (p1, p2) {\n        var distance = 0;\n        for (var i = 1; i <= DIMENSION; i ++) {\n                distance += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n        }\n        return Math.sqrt(distance);\n}\nfunction getNearestNeighbor (currentObject) {\n        var neighbor;\n        var minDist;\n        for (var i = 1; i <= OBS_COUNT; i++ ) {\n                var dist = distance(currentObject, OBSERVATIONS[i].prop);\n                if (!minDist || minDist > dist) {\n                        minDist = dist;\n                        neighbor = OBSERVATIONS[i];\n                }\n        }\n\n        return neighbor;\n}\n\nfunction getBoxProperty (box) {\n        const prop = {\n                length: 0,\n                width: 0,\n                aspectRatio: 0\n        };\n\n        const deltaX = box.xMax - box.xMin + 1;\n        const deltaY = box.yMax - box.yMin + 1;\n\n        prop.length = Math.max(deltaX, deltaY);\n        prop.width = Math.min(deltaX, deltaY);\n        prop.aspectRatio = prop.width / prop.length;\n\n        return prop;\n}\n\nfunction drawBox (box) {\n        const context = canvas.getContext(\"2d\");\n        context.beginPath();\n        const deltaX = box.xMax - box.xMin;\n        const deltaY = box.yMax - box.yMin;\n        context.rect(box.xMin, box.yMin, deltaX, deltaY);\n        context.stroke();\n}\n\nfunction getBoundingBox (matrix) {\n        const bbox = {\n                xMin: SIZE + 1,\n                xMax: 0,\n                yMin: SIZE + 1,\n                yMax: 0\n        };\n        for (var y = 1; y <= SIZE; y++) {\n                for (var x = 1; x <= SIZE; x++) {\n                        if (matrix[y][x] == 0) {\n                                bbox.yMin = Math.min(y, bbox.yMin);\n                                bbox.yMax = Math.max(y, bbox.yMax);\n                                bbox.xMin = Math.min(x, bbox.xMin);\n                                bbox.xMax = Math.max(x, bbox.xMax);\n                        }\n                }\n        }\n\n        return bbox;\n}\n\nfunction isolateObject (matrix) {\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        if (matrix[i][j] < THRESHOLD) {\n                                matrix[i][j] = 0;\n                        } else {\n                                matrix[i][j] = 255\n                        }\n                }\n        }\n}\n\nfunction updateCanvas (matrix) {\n        const context = canvas.getContext(\"2d\");\n        const image = context.getImageData(0, 0, SIZE, SIZE);\n        for (var i = 1; i <= SIZE; i++) {\n                for (var j = 1; j <= SIZE; j++) {\n                        const groupIndex = (i - 1) * SIZE * 4 + (j - 1) * 4;\n                        image.data[groupIndex + 0] = matrix[i][j];\n                        image.data[groupIndex + 1] = matrix[i][j];\n                        image.data[groupIndex + 2] = matrix[i][j];\n                }\n        }\n        context.putImageData(image, 0, 0);\n\n}"],"names":["SIZE","canvas","OBJECT_PROP","OBSERVATIONS","OBS_COUNT","DIMENSION","learn","name","document","getElementById","value","prop","alert","checkKeyPress","event","key","updateImage","video","context","getContext","minSize","Math","min","videoWidth","videoHeight","startX","startY","drawImage","matrix","i","j","isolateObject","box","bbox","xMin","xMax","yMin","yMax","y","x","max","getBoundingBox","boxProp","length","width","aspectRatio","deltaX","deltaY","getBoxProperty","blackPixels","count","countBlackPixels","fullness","currentObject","neighbor","minDist","dist","distance","getNearestNeighbor","innerHTML","recognize","image","getImageData","groupIndex","data","putImageData","updateCanvas","beginPath","rect","stroke","drawBox","processMatrix","dataArray","red","green","blue","getPixelMatrix","p1","p2","sqrt","addEventListener","querySelector","height","navigator","mediaDevices","getUserMedia","then","stream","createElement","srcObject","play","setInterval","catch","error","console","log"],"sourceRoot":""}