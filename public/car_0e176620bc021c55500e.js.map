{"version":3,"sources":["webpack:///./src/pages/car/car.js","webpack:///./src/pages/car/controls.js","webpack:///./src/pages/car/road.js","webpack:///./src/pages/car/sensor.js","webpack:///./src/pages/car/utils.js","webpack:///webpack/bootstrap","webpack:///./src/pages/car/index.js"],"names":["Controls","Sensor","utils","module","exports","x","y","width","height","controlType","maxSpeed","this","speed","acceleration","friction","angle","damaged","sensor","controls","roadBorders","traffic","move","polygon","createPolygon","assessDamage","update","forward","reverse","Math","abs","flip","left","right","sin","cos","i","length","polysIntersect","points","rad","hypot","alpha","atan2","push","PI","ctx","color","fillStyle","beginPath","moveTo","lineTo","fill","draw","type","addKeyboardListeners","document","onkeydown","event","key","onkeyup","laneCount","top","bottom","topLeft","topRight","bottomLeft","bottomRight","borders","laneIndex","laneWidth","min","lineWidth","strokeStyle","lerp","setLineDash","stroke","forEach","border","car","rayCount","rayLength","raySpread","rays","readings","castRays","getReading","ray","touches","touch","getIntersection","poly","j","value","offsets","map","e","offset","minOffset","find","rayAngle","start","end","A","B","t","C","D","tTop","uTop","u","poly1","poly2","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","Car","Road","addEventListener","canvas","querySelector","getContext","road","getLaneCenter","animate","window","innerHeight","save","translate","restore","requestAnimationFrame"],"mappings":"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","file":"car_0e176620bc021c55500e.js","sourcesContent":["\"use strict\";\n\nconst Controls = require(\"src/pages/car/controls.js\");\nconst Sensor = require(\"src/pages/car/sensor.js\");\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Car{\n    constructor(x,y,width,height, controlType, maxSpeed = 3){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n\n        this.speed=0;\n        this.acceleration=0.2;\n        this.maxSpeed=maxSpeed;\n        this.friction=0.05;\n        this.angle=0;\n        this.damaged = false;\n\n        if (controlType !== \"DUMMY\") {\n            this.sensor =  new Sensor(this);\n        }\n\n        this.controls = new Controls(controlType);\n    }\n\n    update(roadBorders, traffic){\n        if(!this.damaged){\n            this.move();\n            this.polygon=this.createPolygon();\n            this.damaged=this.assessDamage(roadBorders, traffic);\n        }\n        if (this.sensor) {\n            this.sensor.update(roadBorders, traffic);\n        }\n\n    }\n\n    move(){\n        if(this.controls.forward){\n            this.speed+=this.acceleration;\n        }\n        if(this.controls.reverse){\n            this.speed-=this.acceleration;\n        }\n\n        if(this.speed>this.maxSpeed){\n            this.speed=this.maxSpeed;\n        }\n        if(this.speed<-this.maxSpeed/2){\n            this.speed=-this.maxSpeed/2;\n        }\n\n        if(this.speed>0){\n            this.speed-=this.friction;\n        }\n        if(this.speed<0){\n            this.speed+=this.friction;\n        }\n        if(Math.abs(this.speed)<this.friction){\n            this.speed=0;\n        }\n\n        if(this.speed!=0){\n            const flip=this.speed>0?1:-1;\n            if(this.controls.left){\n                this.angle+=0.03*flip;\n            }\n            if(this.controls.right){\n                this.angle-=0.03*flip;\n            }\n        }\n\n        this.x-=Math.sin(this.angle)*this.speed;\n        this.y-=Math.cos(this.angle)*this.speed;\n    }\n\n    assessDamage(roadBorders, traffic){\n        for(let i=0;i<roadBorders.length;i++){\n            if(utils.polysIntersect(this.polygon,roadBorders[i])){\n                return true;\n            }\n        }\n        for(let i=0;i<traffic.length;i++){\n            if(utils.polysIntersect(this.polygon,traffic[i].polygon)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    createPolygon(){\n        const points=[];\n        const rad=Math.hypot(this.width,this.height)/2;\n        const alpha=Math.atan2(this.width,this.height);\n        points.push({\n            x:this.x-Math.sin(this.angle-alpha)*rad,\n            y:this.y-Math.cos(this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(this.angle+alpha)*rad,\n            y:this.y-Math.cos(this.angle+alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle-alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle+alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle+alpha)*rad\n        });\n        return points;\n    }\n\n    draw(ctx, color){\n        if(this.damaged){\n            ctx.fillStyle=\"gray\";\n        }else{\n            ctx.fillStyle=color;\n        }\n        ctx.beginPath();\n        ctx.moveTo(this.polygon[0].x,this.polygon[0].y);\n        for(let i=1;i<this.polygon.length;i++){\n            ctx.lineTo(this.polygon[i].x,this.polygon[i].y);\n        }\n        ctx.fill();\n\n        if (this.sensor) {\n            this.sensor.draw(ctx);\n        }\n\n    }\n}\n\nmodule.exports = Car;","\"use strict\";\n\nclass Controls{\n    constructor(type){\n        this.forward=false;\n        this.left=false;\n        this.right=false;\n        this.reverse=false;\n\n        if (type === \"KEYS\") {\n            this.addKeyboardListeners();\n        } else if (type === \"DUMMY\") {\n            this.forward = true;\n        }\n\n\n\n    }\n\n\n    addKeyboardListeners(){\n        document.onkeydown=(event)=>{\n\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=true;\n                    break;\n                case \"ArrowRight\":\n                    this.right=true;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=true;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=true;\n                    break;\n            }\n\n        }\n        document.onkeyup=(event)=>{\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=false;\n                    break;\n                case \"ArrowRight\":\n                    this.right=false;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=false;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=false;\n                    break;\n            }\n        }\n\n\n    }\n}\n\nmodule.exports = Controls;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Road{\n    constructor(x,width,laneCount = 3){\n        this.x=x;\n        this.width=width;\n        this.laneCount=laneCount;\n\n        this.left=x-width/2;\n        this.right=x+width/2;\n\n        const infinity=1000000;\n        this.top=-infinity;\n        this.bottom=infinity;\n\n        const topLeft={x:this.left,y:this.top};\n        const topRight={x:this.right,y:this.top};\n        const bottomLeft={x:this.left,y:this.bottom};\n        const bottomRight={x:this.right,y:this.bottom};\n        this.borders=[\n            [topLeft,bottomLeft],\n            [topRight,bottomRight]\n        ];\n    }\n\n    getLaneCenter(laneIndex){\n        const laneWidth=this.width/this.laneCount;\n        return this.left+laneWidth/2+\n            Math.min(laneIndex,this.laneCount-1)*laneWidth;\n    }\n\n    draw(ctx){\n        ctx.lineWidth=5;\n        ctx.strokeStyle=\"white\";\n\n        for(let i=1;i<=this.laneCount-1;i++){\n            const x= utils.lerp(\n                this.left,\n                this.right,\n                i/this.laneCount\n            );\n\n            ctx.setLineDash([20,20]);\n            ctx.beginPath();\n            ctx.moveTo(x,this.top);\n            ctx.lineTo(x,this.bottom);\n            ctx.stroke();\n        }\n\n        ctx.setLineDash([]);\n        this.borders.forEach(border=>{\n            ctx.beginPath();\n            ctx.moveTo(border[0].x,border[0].y);\n            ctx.lineTo(border[1].x,border[1].y);\n            ctx.stroke();\n        });\n    }\n}\n\nmodule.exports = Road;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Sensor {\n    constructor(car){\n        this.car=car;\n        this.rayCount= 5;\n        this.rayLength=150;\n        this.raySpread=Math.PI/2;\n\n        this.rays=[];\n        this.readings=[];\n    }\n\n    update(roadBorders, traffic){\n        this.castRays();\n        this.readings=[];\n        for(let i=0;i<this.rays.length;i++){\n            this.readings.push(\n                this.getReading(this.rays[i], roadBorders, traffic)\n            );\n        }\n    }\n\n    getReading(ray, roadBorders, traffic){\n        let touches=[];\n\n        for(let i=0;i< roadBorders.length;i++){\n            const touch= utils.getIntersection(\n                ray[0],\n                ray[1],\n                roadBorders[i][0],\n                roadBorders[i][1]\n            );\n            if(touch){\n                touches.push(touch);\n            }\n        }\n\n        for(let i=0;i<traffic.length;i++){\n            const poly=traffic[i].polygon;\n            for(let j=0;j<poly.length;j++){\n                const value=utils.getIntersection(\n                    ray[0],\n                    ray[1],\n                    poly[j],\n                    poly[(j+1)%poly.length]\n                );\n                if(value){\n                    touches.push(value);\n                }\n            }\n        }\n\n        if(touches.length==0){\n            return null;\n        }else{\n            const offsets=touches.map(e=>e.offset);\n            const minOffset=Math.min(...offsets);\n            return touches.find(e=>e.offset==minOffset);\n        }\n    }\n\n    castRays(){\n        this.rays=[];\n        for(let i=0;i<this.rayCount;i++){\n            const rayAngle= utils.lerp(\n                this.raySpread/2,\n                -this.raySpread/2,\n                this.rayCount==1?0.5:i/(this.rayCount-1)\n            )+this.car.angle;\n\n            const start={x:this.car.x, y:this.car.y};\n            const end={\n                x:this.car.x-\n                    Math.sin(rayAngle)*this.rayLength,\n                y:this.car.y-\n                    Math.cos(rayAngle)*this.rayLength\n            };\n            this.rays.push([start,end]);\n        }\n    }\n\n    draw(ctx){\n        for(let i=0;i<this.rayCount;i++){\n            let end=this.rays[i][1];\n            if(this.readings[i]){\n                end=this.readings[i];\n            }\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"yellow\";\n            ctx.moveTo(\n                this.rays[i][0].x,\n                this.rays[i][0].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"black\";\n            ctx.moveTo(\n                this.rays[i][1].x,\n                this.rays[i][1].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n        }\n    }\n\n}\n\nmodule.exports = Sensor;","\"use strict\";\n\nconst utils = {\n    lerp: function (A,B,t){\n        return A+(B-A)*t;\n    },\n    getIntersection: function(A,B,C,D){\n        const tTop=(D.x-C.x)*(A.y-C.y)-(D.y-C.y)*(A.x-C.x);\n        const uTop=(C.y-A.y)*(A.x-B.x)-(C.x-A.x)*(A.y-B.y);\n        const bottom=(D.y-C.y)*(B.x-A.x)-(D.x-C.x)*(B.y-A.y);\n\n        if(bottom!=0){\n            const t=tTop/bottom;\n            const u=uTop/bottom;\n            if(t>=0 && t<=1 && u>=0 && u<=1){\n                return {\n                    x: utils.lerp(A.x,B.x,t),\n                    y: utils.lerp(A.y,B.y,t),\n                    offset:t\n                }\n            }\n        }\n\n        return null;\n    },\n    polysIntersect: function(poly1, poly2){\n        for(let i=0;i<poly1.length;i++){\n            for(let j=0;j<poly2.length;j++){\n                const touch=utils.getIntersection(\n                    poly1[i],\n                    poly1[(i+1)%poly1.length],\n                    poly2[j],\n                    poly2[(j+1)%poly2.length]\n                );\n                if(touch){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n\nmodule.exports = utils;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n\nconst Car = require(\"src/pages/car/car.js\");\nconst Road = require(\"src/pages/car/road.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    const canvas = document.querySelector(\"canvas\");\n\n\n    const ctx = canvas.getContext(\"2d\");\n    const road = new Road(canvas.width / 2, canvas.width * 0.9);\n    const car = new Car(road.getLaneCenter(1),100,30,50,\"KEYS\");\n    const traffic=[\n        new Car(road.getLaneCenter(1),-100,30,50,\"DUMMY\", 2)\n    ];\n\n    animate();\n\n    function animate () {\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].update(road.borders,[]);\n        }\n        car.update(road.borders, traffic);\n\n        canvas.height = window.innerHeight;\n\n        ctx.save();\n        ctx.translate(0, -car.y + canvas.height * 0.75)\n\n        road.draw(ctx);\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].draw(ctx,\"#7bb24d\");\n        }\n        car.draw(ctx, \"#de6717\");\n\n        ctx.restore();\n\n        requestAnimationFrame(animate);\n    }\n});"],"sourceRoot":""}