{"version":3,"sources":["webpack:///./src/pages/car/car.js","webpack:///./src/pages/car/controls.js","webpack:///./src/pages/car/network.js","webpack:///./src/pages/car/road.js","webpack:///./src/pages/car/sensor.js","webpack:///./src/pages/car/utils.js","webpack:///webpack/bootstrap","webpack:///./src/pages/car/index.js"],"names":["NeuralNetwork","Controls","Sensor","utils","module","exports","x","y","width","height","controlType","maxSpeed","this","speed","acceleration","friction","angle","damaged","useBrain","sensor","brain","rayCount","controls","roadBorders","traffic","move","polygon","createPolygon","assessDamage","update","offsets","readings","map","s","offset","outputs","networkFeedForward","forward","left","right","reverse","Math","abs","flip","sin","cos","i","length","polysIntersect","points","rad","hypot","alpha","atan2","push","PI","ctx","color","fillStyle","beginPath","moveTo","lineTo","fill","draw","type","addKeyboardListeners","document","onkeydown","event","key","onkeyup","Level","inputCount","outputCount","inputs","Array","biases","weights","randomize","level","givenInputs","feedForward","neuronCounts","levels","network","laneCount","top","bottom","topLeft","topRight","bottomLeft","bottomRight","borders","laneIndex","laneWidth","min","lineWidth","strokeStyle","lerp","setLineDash","stroke","forEach","border","car","rayLength","raySpread","rays","castRays","getReading","ray","touches","touch","getIntersection","poly","j","value","e","minOffset","find","rayAngle","start","end","A","B","t","C","D","tTop","uTop","u","poly1","poly2","sum","random","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","Car","Road","addEventListener","canvas","querySelector","getContext","road","getLaneCenter","animate","window","innerHeight","save","translate","restore","requestAnimationFrame"],"mappings":"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","file":"car_895097ed0ef2a7fc0a54.js","sourcesContent":["\"use strict\";\n\nconst NeuralNetwork = require(\"src/pages/car/network.js\");\nconst Controls = require(\"src/pages/car/controls.js\");\nconst Sensor = require(\"src/pages/car/sensor.js\");\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Car{\n    constructor(x,y,width,height, controlType, maxSpeed = 3){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n\n        this.speed=0;\n        this.acceleration=0.2;\n        this.maxSpeed=maxSpeed;\n        this.friction=0.05;\n        this.angle=0;\n        this.damaged = false;\n\n        this.useBrain=controlType==\"AI\";\n\n        if (controlType !== \"DUMMY\") {\n            this.sensor =  new Sensor(this);\n            this.brain=new NeuralNetwork(\n                [this.sensor.rayCount,6,4]\n            );\n        }\n\n\n        this.controls = new Controls(controlType);\n    }\n\n    update(roadBorders, traffic){\n        if(!this.damaged){\n            this.move();\n            this.polygon=this.createPolygon();\n            this.damaged=this.assessDamage(roadBorders, traffic);\n        }\n        if(this.sensor){\n            this.sensor.update(roadBorders,traffic);\n\n            const offsets=this.sensor.readings.map(\n                s=>s==null?0:1-s.offset\n            );\n            // console.log(this.brain.levels)\n            const outputs= utils.networkFeedForward(offsets,this.brain);\n\n            if(this.useBrain){\n                this.controls.forward=outputs[0];\n                this.controls.left=outputs[1];\n                this.controls.right=outputs[2];\n                this.controls.reverse=outputs[3];\n            }\n        }\n\n    }\n\n    move(){\n        if(this.controls.forward){\n            this.speed+=this.acceleration;\n        }\n        if(this.controls.reverse){\n            this.speed-=this.acceleration;\n        }\n\n        if(this.speed>this.maxSpeed){\n            this.speed=this.maxSpeed;\n        }\n        if(this.speed<-this.maxSpeed/2){\n            this.speed=-this.maxSpeed/2;\n        }\n\n        if(this.speed>0){\n            this.speed-=this.friction;\n        }\n        if(this.speed<0){\n            this.speed+=this.friction;\n        }\n        if(Math.abs(this.speed)<this.friction){\n            this.speed=0;\n        }\n\n        if(this.speed!=0){\n            const flip=this.speed>0?1:-1;\n            if(this.controls.left){\n                this.angle+=0.03*flip;\n            }\n            if(this.controls.right){\n                this.angle-=0.03*flip;\n            }\n        }\n\n        this.x-=Math.sin(this.angle)*this.speed;\n        this.y-=Math.cos(this.angle)*this.speed;\n    }\n\n    assessDamage(roadBorders, traffic){\n        for(let i=0;i<roadBorders.length;i++){\n            if(utils.polysIntersect(this.polygon,roadBorders[i])){\n                return true;\n            }\n        }\n        for(let i=0;i<traffic.length;i++){\n            if(utils.polysIntersect(this.polygon,traffic[i].polygon)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    createPolygon(){\n        const points=[];\n        const rad=Math.hypot(this.width,this.height)/2;\n        const alpha=Math.atan2(this.width,this.height);\n        points.push({\n            x:this.x-Math.sin(this.angle-alpha)*rad,\n            y:this.y-Math.cos(this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(this.angle+alpha)*rad,\n            y:this.y-Math.cos(this.angle+alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle-alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle+alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle+alpha)*rad\n        });\n        return points;\n    }\n\n    draw(ctx, color){\n        if(this.damaged){\n            ctx.fillStyle=\"gray\";\n        }else{\n            ctx.fillStyle=color;\n        }\n        ctx.beginPath();\n        ctx.moveTo(this.polygon[0].x,this.polygon[0].y);\n        for(let i=1;i<this.polygon.length;i++){\n            ctx.lineTo(this.polygon[i].x,this.polygon[i].y);\n        }\n        ctx.fill();\n\n        if (this.sensor) {\n            this.sensor.draw(ctx);\n        }\n\n    }\n}\n\nmodule.exports = Car;","\"use strict\";\n\nclass Controls{\n    constructor(type){\n        this.forward=false;\n        this.left=false;\n        this.right=false;\n        this.reverse=false;\n\n        if (type === \"KEYS\") {\n            this.addKeyboardListeners();\n        } else if (type === \"DUMMY\") {\n            this.forward = true;\n        }\n\n\n\n    }\n\n\n    addKeyboardListeners(){\n        document.onkeydown=(event)=>{\n\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=true;\n                    break;\n                case \"ArrowRight\":\n                    this.right=true;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=true;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=true;\n                    break;\n            }\n\n        }\n        document.onkeyup=(event)=>{\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=false;\n                    break;\n                case \"ArrowRight\":\n                    this.right=false;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=false;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=false;\n                    break;\n            }\n        }\n\n\n    }\n}\n\nmodule.exports = Controls;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass NeuralNetwork {\n    constructor(neuronCounts){\n\n        this.levels=[];\n        for(let i=0;i<neuronCounts.length-1;i++){\n            this.levels.push(new Level(\n                neuronCounts[i],neuronCounts[i+1]\n            ));\n        }\n    }\n\n    feedForward (givenInputs, network) {\n        return utils.networkFeedForward(givenInputs, network);\n    }\n}\n\n\n\n\nclass Level {\n    constructor(inputCount, outputCount){\n        this.inputs=new Array(inputCount);\n        this.outputs=new Array(outputCount);\n        this.biases=new Array(outputCount);\n\n        this.weights=[];\n        for(let i=0;i<inputCount;i++){\n            this.weights[i]=new Array(outputCount);\n        }\n\n        utils.randomize(this);\n\n\n    }\n\n    randomize (level) {\n        utils.randomize(level);\n    }\n\n    feedForward (givenInputs, level) {\n\n        return utils.feedForward(givenInputs, level);\n\n    }\n\n}\n\n\nmodule.exports = NeuralNetwork;\n","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Road{\n    constructor(x,width,laneCount = 3){\n        this.x=x;\n        this.width=width;\n        this.laneCount=laneCount;\n\n        this.left=x-width/2;\n        this.right=x+width/2;\n\n        const infinity=1000000;\n        this.top=-infinity;\n        this.bottom=infinity;\n\n        const topLeft={x:this.left,y:this.top};\n        const topRight={x:this.right,y:this.top};\n        const bottomLeft={x:this.left,y:this.bottom};\n        const bottomRight={x:this.right,y:this.bottom};\n        this.borders=[\n            [topLeft,bottomLeft],\n            [topRight,bottomRight]\n        ];\n    }\n\n    getLaneCenter(laneIndex){\n        const laneWidth=this.width/this.laneCount;\n        return this.left+laneWidth/2+\n            Math.min(laneIndex,this.laneCount-1)*laneWidth;\n    }\n\n    draw(ctx){\n        ctx.lineWidth=5;\n        ctx.strokeStyle=\"white\";\n\n        for(let i=1;i<=this.laneCount-1;i++){\n            const x= utils.lerp(\n                this.left,\n                this.right,\n                i/this.laneCount\n            );\n\n            ctx.setLineDash([20,20]);\n            ctx.beginPath();\n            ctx.moveTo(x,this.top);\n            ctx.lineTo(x,this.bottom);\n            ctx.stroke();\n        }\n\n        ctx.setLineDash([]);\n        this.borders.forEach(border=>{\n            ctx.beginPath();\n            ctx.moveTo(border[0].x,border[0].y);\n            ctx.lineTo(border[1].x,border[1].y);\n            ctx.stroke();\n        });\n    }\n}\n\nmodule.exports = Road;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Sensor {\n    constructor(car){\n        this.car=car;\n        this.rayCount= 5;\n        this.rayLength=150;\n        this.raySpread=Math.PI/2;\n\n        this.rays=[];\n        this.readings=[];\n    }\n\n    update(roadBorders, traffic){\n        this.castRays();\n        this.readings=[];\n        for(let i=0;i<this.rays.length;i++){\n            this.readings.push(\n                this.getReading(this.rays[i], roadBorders, traffic)\n            );\n        }\n    }\n\n    getReading(ray, roadBorders, traffic){\n        let touches=[];\n\n        for(let i=0;i< roadBorders.length;i++){\n            const touch= utils.getIntersection(\n                ray[0],\n                ray[1],\n                roadBorders[i][0],\n                roadBorders[i][1]\n            );\n            if(touch){\n                touches.push(touch);\n            }\n        }\n\n        for(let i=0;i<traffic.length;i++){\n            const poly=traffic[i].polygon;\n            for(let j=0;j<poly.length;j++){\n                const value=utils.getIntersection(\n                    ray[0],\n                    ray[1],\n                    poly[j],\n                    poly[(j+1)%poly.length]\n                );\n                if(value){\n                    touches.push(value);\n                }\n            }\n        }\n\n        if(touches.length==0){\n            return null;\n        }else{\n            const offsets=touches.map(e=>e.offset);\n            const minOffset=Math.min(...offsets);\n            return touches.find(e=>e.offset==minOffset);\n        }\n    }\n\n    castRays(){\n        this.rays=[];\n        for(let i=0;i<this.rayCount;i++){\n            const rayAngle= utils.lerp(\n                this.raySpread/2,\n                -this.raySpread/2,\n                this.rayCount==1?0.5:i/(this.rayCount-1)\n            )+this.car.angle;\n\n            const start={x:this.car.x, y:this.car.y};\n            const end={\n                x:this.car.x-\n                    Math.sin(rayAngle)*this.rayLength,\n                y:this.car.y-\n                    Math.cos(rayAngle)*this.rayLength\n            };\n            this.rays.push([start,end]);\n        }\n    }\n\n    draw(ctx){\n        for(let i=0;i<this.rayCount;i++){\n            let end=this.rays[i][1];\n            if(this.readings[i]){\n                end=this.readings[i];\n            }\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"yellow\";\n            ctx.moveTo(\n                this.rays[i][0].x,\n                this.rays[i][0].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"black\";\n            ctx.moveTo(\n                this.rays[i][1].x,\n                this.rays[i][1].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n        }\n    }\n\n}\n\nmodule.exports = Sensor;","\"use strict\";\n\nconst utils = {\n    lerp: function (A,B,t){\n        return A+(B-A)*t;\n    },\n    getIntersection: function(A,B,C,D){\n        const tTop=(D.x-C.x)*(A.y-C.y)-(D.y-C.y)*(A.x-C.x);\n        const uTop=(C.y-A.y)*(A.x-B.x)-(C.x-A.x)*(A.y-B.y);\n        const bottom=(D.y-C.y)*(B.x-A.x)-(D.x-C.x)*(B.y-A.y);\n\n        if(bottom!=0){\n            const t=tTop/bottom;\n            const u=uTop/bottom;\n            if(t>=0 && t<=1 && u>=0 && u<=1){\n                return {\n                    x: utils.lerp(A.x,B.x,t),\n                    y: utils.lerp(A.y,B.y,t),\n                    offset:t\n                }\n            }\n        }\n\n        return null;\n    },\n    polysIntersect: function(poly1, poly2){\n        for(let i=0;i<poly1.length;i++){\n            for(let j=0;j<poly2.length;j++){\n                const touch=utils.getIntersection(\n                    poly1[i],\n                    poly1[(i+1)%poly1.length],\n                    poly2[j],\n                    poly2[(j+1)%poly2.length]\n                );\n                if(touch){\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    feedForward: function (givenInputs, level) {\n        for(let i=0;i<level.inputs.length;i++){\n            level.inputs[i]=givenInputs[i];\n        }\n\n        for(let i=0;i<level.outputs.length;i++){\n            let sum=0\n            for(let j=0;j<level.inputs.length;j++){\n                sum+=level.inputs[j]*level.weights[j][i];\n            }\n\n            if(sum>level.biases[i]){\n                level.outputs[i]=1;\n            }else{\n                level.outputs[i]=0;\n            }\n        }\n\n        return level.outputs;\n    },\n\n    networkFeedForward: function (givenInputs, network) {\n        let outputs= utils.feedForward(\n            givenInputs,network.levels[0]);\n        for(let i=1;i<network.levels.length;i++){\n            outputs=utils.feedForward(\n                outputs,network.levels[i]);\n        }\n        return outputs;\n    },\n    randomize: function (level) {\n        for(let i=0;i<level.inputs.length;i++){\n            for(let j=0;j<level.outputs.length;j++){\n                level.weights[i][j]=Math.random()*2-1;\n            }\n        }\n\n        for(let i=0;i<level.biases.length;i++){\n            level.biases[i]=Math.random()*2-1;\n        }\n    }\n};\n\nmodule.exports = utils;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n\nconst Car = require(\"src/pages/car/car.js\");\nconst Road = require(\"src/pages/car/road.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    const canvas = document.querySelector(\"canvas\");\n\n\n    const ctx = canvas.getContext(\"2d\");\n    const road = new Road(canvas.width / 2, canvas.width * 0.9);\n    // const car = new Car(road.getLaneCenter(1),100,30,50,\"KEYS\");\n    const car = new Car(road.getLaneCenter(1),100,30,50,\"AI\");\n    const traffic=[\n        new Car(road.getLaneCenter(1),-100,30,50,\"DUMMY\", 2)\n    ];\n\n    animate();\n\n    function animate () {\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].update(road.borders,[]);\n        }\n        car.update(road.borders, traffic);\n\n        canvas.height = window.innerHeight;\n\n        ctx.save();\n        ctx.translate(0, -car.y + canvas.height * 0.75)\n\n        road.draw(ctx);\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].draw(ctx,\"#7bb24d\");\n        }\n        car.draw(ctx, \"#de6717\");\n\n        ctx.restore();\n\n        requestAnimationFrame(animate);\n    }\n});"],"sourceRoot":""}