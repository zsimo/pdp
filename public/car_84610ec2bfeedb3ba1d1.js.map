{"version":3,"sources":["webpack:///./src/pages/car/car.js","webpack:///./src/pages/car/controls.js","webpack:///./src/pages/car/network.js","webpack:///./src/pages/car/road.js","webpack:///./src/pages/car/sensor.js","webpack:///./src/pages/car/utils.js","webpack:///./src/pages/car/visualizer.js","webpack:///webpack/bootstrap","webpack:///./src/pages/car/index.js"],"names":["NeuralNetwork","Controls","Sensor","utils","module","exports","x","y","width","height","controlType","maxSpeed","this","speed","acceleration","friction","angle","damaged","useBrain","sensor","brain","rayCount","controls","roadBorders","traffic","move","polygon","createPolygon","assessDamage","update","offsets","readings","map","s","offset","outputs","networkFeedForward","forward","left","right","reverse","Math","abs","flip","sin","cos","i","length","polysIntersect","points","rad","hypot","alpha","atan2","push","PI","ctx","color","fillStyle","beginPath","moveTo","lineTo","fill","draw","type","addKeyboardListeners","document","onkeydown","event","key","onkeyup","Level","inputCount","outputCount","inputs","Array","biases","weights","randomize","level","givenInputs","feedForward","neuronCounts","levels","network","amount","forEach","lerp","random","j","laneCount","top","bottom","topLeft","topRight","bottomLeft","bottomRight","borders","laneIndex","laneWidth","min","lineWidth","strokeStyle","setLineDash","stroke","border","car","rayLength","raySpread","rays","castRays","getReading","ray","touches","touch","getIntersection","poly","value","e","minOffset","find","rayAngle","start","end","A","B","t","getNodeX","nodes","index","C","D","tTop","uTop","u","poly1","poly2","sum","getRGBA","R","Visualizer","canvas","margin","levelHeight","levelTop","drawLevel","outputLabels","arc","nodeRadius","textAlign","textBaseline","font","fillText","strokeText","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","Car","Road","addEventListener","getElementById","localStorage","setItem","JSON","stringify","bestCar","removeItem","carCanvas","querySelector","networkCanvas","carCtx","getContext","networkCtx","road","cars","N","getLaneCenter","generateCars","getItem","parse","mutate","animate","time","c","window","innerHeight","save","translate","globalAlpha","restore","lineDashOffset","drawNetwork","requestAnimationFrame"],"mappings":"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","file":"car_84610ec2bfeedb3ba1d1.js","sourcesContent":["\"use strict\";\n\nconst NeuralNetwork = require(\"src/pages/car/network.js\");\nconst Controls = require(\"src/pages/car/controls.js\");\nconst Sensor = require(\"src/pages/car/sensor.js\");\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Car{\n    constructor(x,y,width,height, controlType, maxSpeed = 3){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n\n        this.speed=0;\n        this.acceleration=0.2;\n        this.maxSpeed=maxSpeed;\n        this.friction=0.05;\n        this.angle=0;\n        this.damaged = false;\n\n        this.useBrain=controlType==\"AI\";\n\n        if (controlType !== \"DUMMY\") {\n            this.sensor =  new Sensor(this);\n            this.brain=new NeuralNetwork(\n                [this.sensor.rayCount,6,4]\n            );\n        }\n\n\n        this.controls = new Controls(controlType);\n    }\n\n    update(roadBorders, traffic){\n        if(!this.damaged){\n            this.move();\n            this.polygon=this.createPolygon();\n            this.damaged=this.assessDamage(roadBorders, traffic);\n        }\n        if(this.sensor){\n            this.sensor.update(roadBorders,traffic);\n\n            const offsets=this.sensor.readings.map(\n                s=>s==null?0:1-s.offset\n            );\n            // console.log(this.brain.levels)\n            const outputs= utils.networkFeedForward(offsets,this.brain);\n\n            if(this.useBrain){\n                this.controls.forward=outputs[0];\n                this.controls.left=outputs[1];\n                this.controls.right=outputs[2];\n                this.controls.reverse=outputs[3];\n            }\n        }\n\n    }\n\n    move(){\n        if(this.controls.forward){\n            this.speed+=this.acceleration;\n        }\n        if(this.controls.reverse){\n            this.speed-=this.acceleration;\n        }\n\n        if(this.speed>this.maxSpeed){\n            this.speed=this.maxSpeed;\n        }\n        if(this.speed<-this.maxSpeed/2){\n            this.speed=-this.maxSpeed/2;\n        }\n\n        if(this.speed>0){\n            this.speed-=this.friction;\n        }\n        if(this.speed<0){\n            this.speed+=this.friction;\n        }\n        if(Math.abs(this.speed)<this.friction){\n            this.speed=0;\n        }\n\n        if(this.speed!=0){\n            const flip=this.speed>0?1:-1;\n            if(this.controls.left){\n                this.angle+=0.03*flip;\n            }\n            if(this.controls.right){\n                this.angle-=0.03*flip;\n            }\n        }\n\n        this.x-=Math.sin(this.angle)*this.speed;\n        this.y-=Math.cos(this.angle)*this.speed;\n    }\n\n    assessDamage(roadBorders, traffic){\n        for(let i=0;i<roadBorders.length;i++){\n            if(utils.polysIntersect(this.polygon,roadBorders[i])){\n                return true;\n            }\n        }\n        for(let i=0;i<traffic.length;i++){\n            if(utils.polysIntersect(this.polygon,traffic[i].polygon)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    createPolygon(){\n        const points=[];\n        const rad=Math.hypot(this.width,this.height)/2;\n        const alpha=Math.atan2(this.width,this.height);\n        points.push({\n            x:this.x-Math.sin(this.angle-alpha)*rad,\n            y:this.y-Math.cos(this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(this.angle+alpha)*rad,\n            y:this.y-Math.cos(this.angle+alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle-alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle-alpha)*rad\n        });\n        points.push({\n            x:this.x-Math.sin(Math.PI+this.angle+alpha)*rad,\n            y:this.y-Math.cos(Math.PI+this.angle+alpha)*rad\n        });\n        return points;\n    }\n\n    draw(ctx, color, sensor = false){\n        if(this.damaged){\n            ctx.fillStyle=\"gray\";\n        }else{\n            ctx.fillStyle=color;\n        }\n        ctx.beginPath();\n        ctx.moveTo(this.polygon[0].x,this.polygon[0].y);\n        for(let i=1;i<this.polygon.length;i++){\n            ctx.lineTo(this.polygon[i].x,this.polygon[i].y);\n        }\n        ctx.fill();\n\n        if (this.sensor && sensor) {\n            this.sensor.draw(ctx);\n        }\n\n    }\n}\n\nmodule.exports = Car;","\"use strict\";\n\nclass Controls{\n    constructor(type){\n        this.forward=false;\n        this.left=false;\n        this.right=false;\n        this.reverse=false;\n\n        if (type === \"KEYS\") {\n            this.addKeyboardListeners();\n        } else if (type === \"DUMMY\") {\n            this.forward = true;\n        }\n\n\n\n    }\n\n\n    addKeyboardListeners(){\n        document.onkeydown=(event)=>{\n\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=true;\n                    break;\n                case \"ArrowRight\":\n                    this.right=true;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=true;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=true;\n                    break;\n            }\n\n        }\n        document.onkeyup=(event)=>{\n            switch(event.key){\n                case \"ArrowLeft\":\n                    this.left=false;\n                    break;\n                case \"ArrowRight\":\n                    this.right=false;\n                    break;\n                case \"ArrowUp\":\n                    this.forward=false;\n                    break;\n                case \"ArrowDown\":\n                    this.reverse=false;\n                    break;\n            }\n        }\n\n\n    }\n}\n\nmodule.exports = Controls;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass NeuralNetwork {\n    constructor(neuronCounts){\n\n        this.levels=[];\n        for(let i=0;i<neuronCounts.length-1;i++){\n            this.levels.push(new Level(\n                neuronCounts[i],neuronCounts[i+1]\n            ));\n        }\n    }\n\n    feedForward (givenInputs, network) {\n        return utils.networkFeedForward(givenInputs, network);\n    }\n    static mutate(network,amount=1){\n        network.levels.forEach(level => {\n            for(let i=0;i<level.biases.length;i++){\n                level.biases[i]=utils.lerp(\n                    level.biases[i],\n                    Math.random()*2-1,\n                    amount\n                )\n            }\n            for(let i=0;i<level.weights.length;i++){\n                for(let j=0;j<level.weights[i].length;j++){\n                    level.weights[i][j]=utils.lerp(\n                        level.weights[i][j],\n                        Math.random()*2-1,\n                        amount\n                    )\n                }\n            }\n        });\n    }\n}\n\n\n\n\nclass Level {\n    constructor(inputCount, outputCount){\n        this.inputs=new Array(inputCount);\n        this.outputs=new Array(outputCount);\n        this.biases=new Array(outputCount);\n\n        this.weights=[];\n        for(let i=0;i<inputCount;i++){\n            this.weights[i]=new Array(outputCount);\n        }\n\n        utils.randomize(this);\n\n\n    }\n\n    randomize (level) {\n        utils.randomize(level);\n    }\n\n    feedForward (givenInputs, level) {\n\n        return utils.feedForward(givenInputs, level);\n\n    }\n\n}\n\n\nmodule.exports = NeuralNetwork;\n","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Road{\n    constructor(x,width,laneCount = 3){\n        this.x=x;\n        this.width=width;\n        this.laneCount=laneCount;\n\n        this.left=x-width/2;\n        this.right=x+width/2;\n\n        const infinity=1000000;\n        this.top=-infinity;\n        this.bottom=infinity;\n\n        const topLeft={x:this.left,y:this.top};\n        const topRight={x:this.right,y:this.top};\n        const bottomLeft={x:this.left,y:this.bottom};\n        const bottomRight={x:this.right,y:this.bottom};\n        this.borders=[\n            [topLeft,bottomLeft],\n            [topRight,bottomRight]\n        ];\n    }\n\n    getLaneCenter(laneIndex){\n        const laneWidth=this.width/this.laneCount;\n        return this.left+laneWidth/2+\n            Math.min(laneIndex,this.laneCount-1)*laneWidth;\n    }\n\n    draw(ctx){\n        ctx.lineWidth=5;\n        ctx.strokeStyle=\"white\";\n\n        for(let i=1;i<=this.laneCount-1;i++){\n            const x= utils.lerp(\n                this.left,\n                this.right,\n                i/this.laneCount\n            );\n\n            ctx.setLineDash([20,20]);\n            ctx.beginPath();\n            ctx.moveTo(x,this.top);\n            ctx.lineTo(x,this.bottom);\n            ctx.stroke();\n        }\n\n        ctx.setLineDash([]);\n        this.borders.forEach(border=>{\n            ctx.beginPath();\n            ctx.moveTo(border[0].x,border[0].y);\n            ctx.lineTo(border[1].x,border[1].y);\n            ctx.stroke();\n        });\n    }\n}\n\nmodule.exports = Road;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Sensor {\n    constructor(car){\n        this.car=car;\n        this.rayCount= 5;\n        this.rayLength=150;\n        this.raySpread=Math.PI/2;\n\n        this.rays=[];\n        this.readings=[];\n    }\n\n    update(roadBorders, traffic){\n        this.castRays();\n        this.readings=[];\n        for(let i=0;i<this.rays.length;i++){\n            this.readings.push(\n                this.getReading(this.rays[i], roadBorders, traffic)\n            );\n        }\n    }\n\n    getReading(ray, roadBorders, traffic){\n        let touches=[];\n\n        for(let i=0;i< roadBorders.length;i++){\n            const touch= utils.getIntersection(\n                ray[0],\n                ray[1],\n                roadBorders[i][0],\n                roadBorders[i][1]\n            );\n            if(touch){\n                touches.push(touch);\n            }\n        }\n\n        for(let i=0;i<traffic.length;i++){\n            const poly=traffic[i].polygon;\n            for(let j=0;j<poly.length;j++){\n                const value=utils.getIntersection(\n                    ray[0],\n                    ray[1],\n                    poly[j],\n                    poly[(j+1)%poly.length]\n                );\n                if(value){\n                    touches.push(value);\n                }\n            }\n        }\n\n        if(touches.length==0){\n            return null;\n        }else{\n            const offsets=touches.map(e=>e.offset);\n            const minOffset=Math.min(...offsets);\n            return touches.find(e=>e.offset==minOffset);\n        }\n    }\n\n    castRays(){\n        this.rays=[];\n        for(let i=0;i<this.rayCount;i++){\n            const rayAngle= utils.lerp(\n                this.raySpread/2,\n                -this.raySpread/2,\n                this.rayCount==1?0.5:i/(this.rayCount-1)\n            )+this.car.angle;\n\n            const start={x:this.car.x, y:this.car.y};\n            const end={\n                x:this.car.x-\n                    Math.sin(rayAngle)*this.rayLength,\n                y:this.car.y-\n                    Math.cos(rayAngle)*this.rayLength\n            };\n            this.rays.push([start,end]);\n        }\n    }\n\n    draw(ctx){\n        for(let i=0;i<this.rayCount;i++){\n            let end=this.rays[i][1];\n            if(this.readings[i]){\n                end=this.readings[i];\n            }\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"yellow\";\n            ctx.moveTo(\n                this.rays[i][0].x,\n                this.rays[i][0].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.strokeStyle=\"black\";\n            ctx.moveTo(\n                this.rays[i][1].x,\n                this.rays[i][1].y\n            );\n            ctx.lineTo(\n                end.x,\n                end.y\n            );\n            ctx.stroke();\n        }\n    }\n\n}\n\nmodule.exports = Sensor;","\"use strict\";\n\nconst utils = {\n    lerp: function (A,B,t){\n        return A+(B-A)*t;\n    },\n    getNodeX: function (nodes,index,left,right) {\n        return utils.lerp(\n            left,\n            right,\n            nodes.length==1\n                ?0.5\n                :index/(nodes.length-1)\n        );\n    },\n    getIntersection: function(A,B,C,D){\n        const tTop=(D.x-C.x)*(A.y-C.y)-(D.y-C.y)*(A.x-C.x);\n        const uTop=(C.y-A.y)*(A.x-B.x)-(C.x-A.x)*(A.y-B.y);\n        const bottom=(D.y-C.y)*(B.x-A.x)-(D.x-C.x)*(B.y-A.y);\n\n        if(bottom!=0){\n            const t=tTop/bottom;\n            const u=uTop/bottom;\n            if(t>=0 && t<=1 && u>=0 && u<=1){\n                return {\n                    x: utils.lerp(A.x,B.x,t),\n                    y: utils.lerp(A.y,B.y,t),\n                    offset:t\n                }\n            }\n        }\n\n        return null;\n    },\n    polysIntersect: function(poly1, poly2){\n        for(let i=0;i<poly1.length;i++){\n            for(let j=0;j<poly2.length;j++){\n                const touch=utils.getIntersection(\n                    poly1[i],\n                    poly1[(i+1)%poly1.length],\n                    poly2[j],\n                    poly2[(j+1)%poly2.length]\n                );\n                if(touch){\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    feedForward: function (givenInputs, level) {\n        for(let i=0;i<level.inputs.length;i++){\n            level.inputs[i]=givenInputs[i];\n        }\n\n        for(let i=0;i<level.outputs.length;i++){\n            let sum=0\n            for(let j=0;j<level.inputs.length;j++){\n                sum+=level.inputs[j]*level.weights[j][i];\n            }\n\n            if(sum>level.biases[i]){\n                level.outputs[i]=1;\n            }else{\n                level.outputs[i]=0;\n            }\n        }\n\n        return level.outputs;\n    },\n\n    networkFeedForward: function (givenInputs, network) {\n        let outputs= utils.feedForward(\n            givenInputs,network.levels[0]);\n        for(let i=1;i<network.levels.length;i++){\n            outputs=utils.feedForward(\n                outputs,network.levels[i]);\n        }\n        return outputs;\n    },\n    randomize: function (level) {\n        for(let i=0;i<level.inputs.length;i++){\n            for(let j=0;j<level.outputs.length;j++){\n                level.weights[i][j]=Math.random()*2-1;\n            }\n        }\n\n        for(let i=0;i<level.biases.length;i++){\n            level.biases[i]=Math.random()*2-1;\n        }\n    },\n    getRGBA: function(value){\n        const alpha=Math.abs(value);\n        const R=value<0?0:255;\n        const G=R;\n        const B=value>0?0:255;\n        return \"rgba(\"+R+\",\"+G+\",\"+B+\",\"+alpha+\")\";\n    }\n};\n\nmodule.exports = utils;","\"use strict\";\n\nconst utils = require(\"src/pages/car/utils.js\");\n\nclass Visualizer{\n    static drawNetwork(ctx,network){\n        const margin=50;\n        const left=margin;\n        const top=margin;\n        const width=ctx.canvas.width-margin*2;\n        const height=ctx.canvas.height-margin*2;\n\n        const levelHeight=height/network.levels.length;\n\n        for(let i=network.levels.length-1;i>=0;i--){\n            const levelTop=top+\n                utils.lerp(\n                    height-levelHeight,\n                    0,\n                    network.levels.length==1\n                        ?0.5\n                        :i/(network.levels.length-1)\n                );\n\n            ctx.setLineDash([7,3]);\n            Visualizer.drawLevel(ctx,network.levels[i],\n                left,levelTop,\n                width,levelHeight,\n                i==network.levels.length-1\n                    ?['🠉','🠈','🠊','🠋']\n                    :[]\n            );\n        }\n    }\n\n    static drawLevel(ctx,level,left,top,width,height,outputLabels){\n        const right=left+width;\n        const bottom=top+height;\n\n        const {inputs,outputs,weights,biases}=level;\n\n        for(let i=0;i<inputs.length;i++){\n            for(let j=0;j<outputs.length;j++){\n                ctx.beginPath();\n                ctx.moveTo(\n                    utils.getNodeX(inputs,i,left,right),\n                    bottom\n                );\n                ctx.lineTo(\n                    utils.getNodeX(outputs,j,left,right),\n                    top\n                );\n                ctx.lineWidth=2;\n                ctx.strokeStyle=utils.getRGBA(weights[i][j]);\n                ctx.stroke();\n            }\n        }\n\n        const nodeRadius=18;\n        for(let i=0;i<inputs.length;i++){\n            const x=utils.getNodeX(inputs,i,left,right);\n            ctx.beginPath();\n            ctx.arc(x,bottom,nodeRadius,0,Math.PI*2);\n            ctx.fillStyle=\"black\";\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(x,bottom,nodeRadius*0.6,0,Math.PI*2);\n            ctx.fillStyle=utils.getRGBA(inputs[i]);\n            ctx.fill();\n        }\n\n        for(let i=0;i<outputs.length;i++){\n            const x=utils.getNodeX(outputs,i,left,right);\n            ctx.beginPath();\n            ctx.arc(x,top,nodeRadius,0,Math.PI*2);\n            ctx.fillStyle=\"black\";\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(x,top,nodeRadius*0.6,0,Math.PI*2);\n            ctx.fillStyle=utils.getRGBA(outputs[i]);\n            ctx.fill();\n\n            ctx.beginPath();\n            ctx.lineWidth=2;\n            ctx.arc(x,top,nodeRadius*0.8,0,Math.PI*2);\n            ctx.strokeStyle=utils.getRGBA(biases[i]);\n            ctx.setLineDash([3,3]);\n            ctx.stroke();\n            ctx.setLineDash([]);\n\n            if(outputLabels[i]){\n                ctx.beginPath();\n                ctx.textAlign=\"center\";\n                ctx.textBaseline=\"middle\";\n                ctx.fillStyle=\"black\";\n                ctx.strokeStyle=\"white\";\n                ctx.font=(nodeRadius*1.5)+\"px Arial\";\n                ctx.fillText(outputLabels[i],x,top+nodeRadius*0.1);\n                ctx.lineWidth=0.5;\n                ctx.strokeText(outputLabels[i],x,top+nodeRadius*0.1);\n            }\n        }\n    }\n\n    static getNodeX(nodes,index,left,right){\n        return utils.getNodeX(nodes,index,left,right);\n    }\n}\n\nmodule.exports = Visualizer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n\nconst Car = require(\"src/pages/car/car.js\");\nconst Road = require(\"src/pages/car/road.js\");\nconst Visualizer = require(\"src/pages/car/visualizer.js\");\nconst NeuralNetwork = require(\"src/pages/car/network.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n\n    document.getElementById(\"save\").addEventListener(\"click\", save);\n    document.getElementById(\"discard\").addEventListener(\"click\", discard);\n\n    const carCanvas = document.querySelector(\"#car-canvas\");\n    const networkCanvas = document.querySelector(\"#network-canvas\");\n\n    const carCtx = carCanvas.getContext(\"2d\");\n    const networkCtx = networkCanvas.getContext(\"2d\");\n    const road = new Road(carCanvas.width / 2, carCanvas.width * 0.9);\n    // const car = new Car(road.getLaneCenter(1),100,30,50,\"KEYS\");\n    // const car = new Car(road.getLaneCenter(1),100,30,50,\"AI\");\n\n    const cars = generateCars(1);\n    let bestCar=cars[0];\n    if(localStorage.getItem(\"bestBrain\")){\n        for(let i=0;i<cars.length;i++){\n            cars[i].brain=JSON.parse(\n                localStorage.getItem(\"bestBrain\"));\n            if(i!=0){\n                NeuralNetwork.mutate(cars[i].brain,0.1);\n            }\n        }\n    }\n\n\n    function save(){\n        localStorage.setItem(\"bestBrain\",\n            JSON.stringify(bestCar.brain));\n    }\n\n    function discard(){\n        localStorage.removeItem(\"bestBrain\");\n    }\n\n    const traffic=[\n        new Car(road.getLaneCenter(1),-100,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(0),-300,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(2),-300,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(0),-500,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(1),-500,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(1),-700,30,50,\"DUMMY\",2),\n        new Car(road.getLaneCenter(2),-700,30,50,\"DUMMY\",2),\n    ];\n\n\n    function generateCars(N){\n        const cars=[];\n        for(let i=1;i<=N;i++){\n            cars.push(new Car(road.getLaneCenter(1),100,30,50,\"AI\"));\n        }\n        return cars;\n    }\n\n    animate();\n\n    function animate (time) {\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].update(road.borders,[]);\n        }\n\n        for(let i=0;i<cars.length;i++){\n            cars[i].update(road.borders, traffic);\n        }\n        bestCar=cars.find(\n            c=>c.y==Math.min(\n                ...cars.map(c=>c.y)\n            ));\n\n\n        carCanvas.height = window.innerHeight;\n        networkCanvas.height = window.innerHeight;\n\n\n        carCtx.save();\n        carCtx.translate(0, -bestCar.y + carCanvas.height * 0.75)\n\n        road.draw(carCtx);\n        for(let i=0;i<traffic.length;i++){\n            traffic[i].draw(carCtx,\"#7bb24d\");\n        }\n\n        carCtx.globalAlpha = 0.2;\n        for(let i=0;i<cars.length;i++){\n            cars[i].draw(carCtx, \"#de6717\");\n        }\n        carCtx.globalAlpha = 1;\n        bestCar.draw(carCtx, \"#de6717\", true);\n\n        carCtx.restore();\n\n        networkCtx.lineDashOffset = -time / 50;\n        Visualizer.drawNetwork(networkCtx, bestCar.brain);\n        requestAnimationFrame(animate);\n    }\n});"],"sourceRoot":""}